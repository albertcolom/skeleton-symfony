# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $openapiPath: "%kernel.project_dir%/%env(OPENAPI_PATH)%"

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
    App\UI\Controller\:
        resource: '../src/UI/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    _instanceof:
        App\Shared\Domain\Bus\Command\CommandHandler:
            tags:
                - { name: messenger.message_handler, bus: sync.command.bus }
        App\Shared\Domain\Bus\Query\QueryHandler:
            tags:
                - { name: messenger.message_handler, bus: sync.query.bus }
        App\Shared\Domain\Bus\Event\EventListener:
            tags:
                - { name: messenger.message_handler, bus: async.event.bus }

    App\Shared\Infrastructure\Bus\MessengerCommandBus:
        arguments:
            - '@sync.command.bus'
    App\Shared\Infrastructure\Bus\MessengerQueryBus:
        arguments:
            - '@sync.query.bus'
    App\Shared\Infrastructure\Bus\MessengerCacheQueryBus:
        arguments:
            - '@sync.query.bus'
    App\Shared\Infrastructure\Bus\MessengerEventBus:
        arguments:
            - '@async.event.bus'
    App\Shared\Infrastructure\Listener\DoctrinePublishDomainEventsOnFlushListener:
        tags:
            - { name: doctrine.event_listener, event: onFlush }
